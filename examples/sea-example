
namespace org.bovinegenius.net {

  module type ORDER {
    typedef T;
    int equal(T, T);
    int less(T, T);
  }

  module IntOrder: ORDER {
    typedef int T;
    T equal(T x, T y) { return x == y; }
    T less(T x, T y)  { return x < y; }
  }

  module LexicographicOrder(Ord1: ORDER)(Ord2: ORDER) {
    int equal(Ord1.T p1, Ord2.T p2, Ord1.T q1, Ord2.T q2) {
      if (Ord1.equal(p1, q1)) {
        return Ord2.equal(p2, q2);
      } else {
        return 0;
      }
    }

    int less(Ord1.T p1, Ord2.T p2, Ord1.T q1, Ord2.T q2) {
      if (Ord1.less(p1, q1)) { return 1; }
      if (! Ord1.equal(p1, q1)) { return 0; }
      return Ord2.less(p2, q2);
    }
}

  module IntPairOrder = LexicographicOrder(IntOrder)(IntOrder);

}
